'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import confetti from 'canvas-confetti';
import Link from 'next/link';
import { FaArrowLeft } from 'react-icons/fa';

interface Task {
  id: number;
  text: string;
  completed: boolean;
}

const moduleContent = {
  mentalidade: {
    title: 'Mentalidade do Evangelista Digital',
    icon: 'üß†',
    content: `
      <h2>Desenvolvendo a Mentalidade Correta</h2>
      <p>Como evangelista digital, voc√™ precisa desenvolver uma mentalidade focada em:</p>
      <ul>
        <li>Compaix√£o e empatia com seu p√∫blico</li>
        <li>Consist√™ncia na produ√ß√£o de conte√∫do</li>
        <li>Autenticidade em suas mensagens</li>
        <li>Disposi√ß√£o para aprender e adaptar</li>
      </ul>
    `,
    tasks: [
      { id: 1, text: 'Definir seu p√∫blico-alvo nas redes sociais', completed: false },
      { id: 2, text: 'Criar sua declara√ß√£o de miss√£o pessoal', completed: false },
      { id: 3, text: 'Estabelecer uma rotina di√°ria de devo√ß√£o', completed: false },
      { id: 4, text: 'Identificar suas for√ßas e √°reas de melhoria', completed: false }
    ]
  },
  metodo: {
    title: 'Entendendo o M√©todo',
    icon: 'üìö',
    content: `
      <h2>O M√©todo Stories Evangel√≠stico</h2>
      <p>Aprenda os fundamentos do m√©todo que vai transformar seus stories em ferramentas poderosas de evangelismo:</p>
      <ul>
        <li>Estrutura de storytelling b√≠blico</li>
        <li>T√©cnicas de engajamento emocional</li>
        <li>Princ√≠pios de comunica√ß√£o efetiva</li>
        <li>Elementos visuais e narrativos</li>
      </ul>
    `,
    tasks: [
      { id: 1, text: 'Estudar os elementos b√°sicos do storytelling', completed: false },
      { id: 2, text: 'Analisar 3 hist√≥rias b√≠blicas usando o m√©todo', completed: false },
      { id: 3, text: 'Criar um roteiro b√°sico para stories', completed: false },
      { id: 4, text: 'Praticar t√©cnicas de narrativa visual', completed: false }
    ]
  },
  pratica: {
    title: 'Aplica√ß√£o na Pr√°tica',
    icon: 'üéØ',
    content: `
      <h2>Colocando em Pr√°tica</h2>
      <p>Chegou a hora de aplicar o conhecimento na pr√°tica:</p>
      <ul>
        <li>Cria√ß√£o de conte√∫do envolvente</li>
        <li>Uso efetivo de recursos visuais</li>
        <li>Intera√ß√£o com a audi√™ncia</li>
        <li>Medi√ß√£o de resultados</li>
      </ul>
    `,
    tasks: [
      { id: 1, text: 'Criar sua primeira s√©rie de stories evangel√≠sticos', completed: false },
      { id: 2, text: 'Desenvolver um calend√°rio de conte√∫do semanal', completed: false },
      { id: 3, text: 'Implementar t√©cnicas de intera√ß√£o nos stories', completed: false },
      { id: 4, text: 'Analisar m√©tricas e feedback do p√∫blico', completed: false }
    ]
  },
  criticas: {
    title: 'Como Lidar com Cr√≠ticas e Obje√ß√µes',
    icon: 'üõ°Ô∏è',
    content: `
      <h2>Lidando com Diferentes Tipos de Feedback</h2>
      <p>Aprenda a lidar com cr√≠ticas e obje√ß√µes de forma construtiva:</p>
      <ul>
        <li>Tipos comuns de cr√≠ticas no ambiente digital</li>
        <li>Respondendo com gra√ßa e sabedoria</li>
        <li>Transformando cr√≠ticas em oportunidades</li>
        <li>Mantendo a paz em discuss√µes online</li>
      </ul>
    `,
    tasks: [
      { id: 1, text: 'Identificar padr√µes comuns de cr√≠ticas', completed: false },
      { id: 2, text: 'Desenvolver respostas modelo para obje√ß√µes frequentes', completed: false },
      { id: 3, text: 'Praticar t√©cnicas de comunica√ß√£o n√£o-violenta', completed: false },
      { id: 4, text: 'Criar um guia pessoal de resposta a cr√≠ticas', completed: false }
    ]
  },
  crescimento: {
    title: 'Crescimento e Escala',
    icon: 'üìà',
    content: `
      <h2>Expandindo seu Alcance e Impacto</h2>
      <p>Maximize seu impacto nas redes sociais:</p>
      <ul>
        <li>Estrat√©gias de crescimento org√¢nico</li>
        <li>Constru√ß√£o de comunidade engajada</li>
        <li>Parcerias estrat√©gicas</li>
        <li>An√°lise de dados e otimiza√ß√£o</li>
      </ul>
    `,
    tasks: [
      { id: 1, text: 'Desenvolver uma estrat√©gia de crescimento', completed: false },
      { id: 2, text: 'Implementar t√©cnicas de engajamento comunit√°rio', completed: false },
      { id: 3, text: 'Estabelecer parcerias com outros criadores', completed: false },
      { id: 4, text: 'Criar um sistema de an√°lise de resultados', completed: false }
    ]
  }
};

export default function ModulePage({ params }: { params: { module: string } }) {
  const router = useRouter();
  const [tasks, setTasks] = useState<Task[]>([]);
  const [isCompleted, setIsCompleted] = useState(false);
  const currentModule = moduleContent[params.module as keyof typeof moduleContent];

  useEffect(() => {
    const savedTasks = localStorage.getItem(`tasks-${params.module}`);
    if (savedTasks) {
      setTasks(JSON.parse(savedTasks));
    } else if (currentModule) {
      setTasks(currentModule.tasks);
    }
  }, [params.module, currentModule]);

  const handleTaskToggle = (taskId: number) => {
    const newTasks = tasks.map(task =>
      task.id === taskId ? { ...task, completed: !task.completed } : task
    );
    setTasks(newTasks);
    localStorage.setItem(`tasks-${params.module}`, JSON.stringify(newTasks));
  };

  const handleModuleComplete = () => {
    const completedModules = JSON.parse(localStorage.getItem('completedModules') || '[]');
    if (!completedModules.includes(params.module)) {
      completedModules.push(params.module);
      localStorage.setItem('completedModules', JSON.stringify(completedModules));
      
      confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 }
      });

      setIsCompleted(true);
      setTimeout(() => {
        router.push('/dashboard/jornada');
      }, 3000);
    }
  };

  if (!currentModule) {
    return <div>M√≥dulo n√£o encontrado</div>;
  }

  const allTasksCompleted = tasks.every(task => task.completed);

  return (
    <div className="min-h-screen bg-gradient-to-br from-dark via-dark-light to-dark-lighter py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <Link href="/dashboard/jornada" className="inline-flex items-center text-primary hover:text-primary/80 transition-colors">
            <FaArrowLeft className="mr-2" />
            <span>Voltar para a Jornada</span>
          </Link>
        </div>

        <div className="relative p-8 rounded-xl backdrop-blur-md bg-dark-light/90 border border-primary/20 hover:border-primary/40 shadow-lg">
          <div className="flex items-center mb-8">
            <span className="text-4xl mr-4">{currentModule.icon}</span>
            <h1 className="text-3xl font-bold gradient-text">{currentModule.title}</h1>
          </div>

          <div 
            className="prose prose-invert max-w-none mb-12"
            dangerouslySetInnerHTML={{ __html: currentModule.content }}
          />

          <div className="bg-dark-lighter/50 rounded-lg p-6 mb-8 backdrop-blur-sm border border-primary/10">
            <h2 className="text-xl font-semibold mb-4 text-white">Checklist Pr√°tico</h2>
            <div className="space-y-4">
              {tasks.map(task => (
                <div
                  key={task.id}
                  className="flex items-center space-x-3"
                >
                  <input
                    type="checkbox"
                    checked={task.completed}
                    onChange={() => handleTaskToggle(task.id)}
                    className="h-5 w-5 text-primary rounded border-gray-600 focus:ring-primary bg-dark-lighter"
                  />
                  <label className="text-gray-300">{task.text}</label>
                </div>
              ))}
            </div>
          </div>

          {allTasksCompleted && !isCompleted && (
            <button
              onClick={handleModuleComplete}
              className="w-full bg-primary text-dark font-semibold py-3 px-6 rounded-lg hover:bg-primary/90 transition-colors"
            >
              Concluir M√≥dulo
            </button>
          )}

          {isCompleted && (
            <div className="text-center py-8">
              <h3 className="text-2xl font-bold text-primary mb-2">
                üéâ Parab√©ns!
              </h3>
              <p className="text-gray-300">
                Voc√™ completou este m√≥dulo com sucesso!
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
} 